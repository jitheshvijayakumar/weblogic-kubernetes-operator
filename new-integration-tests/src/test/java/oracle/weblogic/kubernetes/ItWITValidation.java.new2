// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

package oracle.weblogic.kubernetes;

<<<<<<< Updated upstream
import oracle.weblogic.kubernetes.actions.TestActions;
=======
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

>>>>>>> Stashed changes
import oracle.weblogic.kubernetes.extensions.LoggedTest;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

<<<<<<< Updated upstream
=======
import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;
import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;
import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;
import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;
import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;
import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;
>>>>>>> Stashed changes
import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;
import static org.junit.jupiter.api.Assertions.assertEquals;

@DisplayName("Simple validation of basic WIT functions")
class ItWITValidation implements LoggedTest {
  @Test
  @DisplayName("Create a MII image")
  public void testCreatingMIIImage() {

    // create the MII image
    // TODO add model files and other contents to the image once we have those resources
    boolean success = TestActions.createMIIImage(withWITParams());

<<<<<<< Updated upstream
    assertEquals(true, success, "Failed to create the image using WebLogic Deploy Tool");
=======
    // build the model file list
    List<String> modelList = Collections.singletonList(MODEL_DIR + "/" + WDT_MODEL_FILE);
    
    // build an application archive using the src in APP_NAME directory
    boolean archiveBuilt = buildAppArchive(
        withAppParams()
            .srcDir(APP_NAME));
    
    assertThat(archiveBuilt)
        .as("Create an app archive")
        .withFailMessage("Failed to create the app archive")
        .isTrue();
    
    String zipFile = String.format("%s/%s.zip", ARCHIVE_DIR, APP_NAME);
    
    List<String> archiveList = Collections.singletonList(zipFile);
    
    Map<String, String> env = new HashMap();
    env.put("WLSIMG_BLDDIR", WORK_DIR);
    
    // build an image using WebLogic Image Tool
    boolean success = createMIIImage(
        withWITParams()
            .modelImageName(IMAGE_NAME)
            .modelImageTag(IMAGE_TAG)
            .modelFiles(modelList)
            .modelArchiveFiles(archiveList)
            .wdtVersion("latest")
            .env(env)
            .redirect(false));
 
    assertThat(success)
        .as("Test the Docker image is created")
        .withFailMessage("Failed to create the image using WebLogic Deploy Tool")
        .isTrue();
    
    dockerImageExists(IMAGE_NAME, IMAGE_TAG);
>>>>>>> Stashed changes
  } 
}
